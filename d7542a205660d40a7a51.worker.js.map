{"version":3,"sources":["webpack:///webpack/bootstrap d7542a205660d40a7a51","webpack:///./~/waveform-playlist/lib/track/recorderWorker.js","webpack:///./~/webaudio-peaks/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACtCA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA,G;;;;;;;;;ACZA;;AAEA;AACA;AACA;AACA,WAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAU,OAAO;AACjB,WAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAU,WAAW;AACrB,WAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA;;AAEA;AACA;;AAEA,gBAAe,cAAc;;AAE7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,cAAc;AAC7B;AACA;;AAEA,oBAAmB,aAAa;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAU,uBAAuB;AACjC,WAAU,OAAO;AACjB,WAAU,OAAO;AACjB,WAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,G","file":"d7542a205660d40a7a51.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d7542a205660d40a7a51\n **/","'use strict';\n\nvar _webaudioPeaks = require('webaudio-peaks');\n\nvar _webaudioPeaks2 = _interopRequireDefault(_webaudioPeaks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nonmessage = function onmessage(e) {\n    var peaks = (0, _webaudioPeaks2.default)(e.data.samples, e.data.samplesPerPixel);\n\n    postMessage(peaks);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/waveform-playlist/lib/track/recorderWorker.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\n//http://jsperf.com/typed-array-min-max/2\n//plain for loop for finding min/max is way faster than anything else.\n/**\n* @param {TypedArray} array - Subarray of audio to calculate peaks from.\n*/\nfunction findMinMax(array) {\n    var min = Infinity;\n    var max = -Infinity;\n    var i = 0;\n    var len = array.length;\n    var curr;\n\n    for (; i < len; i++) {\n        curr = array[i];\n        if (min > curr) {\n            min = curr;\n        }\n        if (max < curr) {\n            max = curr;\n        }\n    }\n\n    return {\n        min: min,\n        max: max\n    };\n}\n\n/**\n* @param {Number} n - peak to convert from float to Int8, Int16 etc.\n* @param {Number} bits - convert to #bits two's complement signed integer\n*/\nfunction convert(n, bits) {\n    var max = Math.pow(2, bits-1);\n    var v = n < 0 ? n * max : n * max - 1;\n    return Math.max(-max, Math.min(max-1, v));\n}\n\n/**\n* @param {TypedArray} channel - Audio track frames to calculate peaks from.\n* @param {Number} samplesPerPixel - Audio frames per peak\n*/\nfunction extractPeaks(channel, samplesPerPixel, bits) {\n    var i;\n    var chanLength = channel.length;\n    var numPeaks = Math.ceil(chanLength / samplesPerPixel);\n    var start;\n    var end;\n    var segment;\n    var max; \n    var min;\n    var extrema;\n\n    //create interleaved array of min,max\n    var peaks = new (eval(\"Int\"+bits+\"Array\"))(numPeaks*2);\n\n    for (i = 0; i < numPeaks; i++) {\n\n        start = i * samplesPerPixel;\n        end = (i + 1) * samplesPerPixel > chanLength ? chanLength : (i + 1) * samplesPerPixel;\n\n        segment = channel.subarray(start, end);\n        extrema = findMinMax(segment);\n        min = convert(extrema.min, bits);\n        max = convert(extrema.max, bits);\n\n        peaks[i*2] = min;\n        peaks[i*2+1] = max;\n    }\n\n    return peaks;\n}\n\nfunction makeMono(channelPeaks, bits) {\n    var numChan = channelPeaks.length;\n    var weight = 1 / numChan;\n    var numPeaks = channelPeaks[0].length / 2;\n    var c = 0;\n    var i = 0;\n    var min;\n    var max;\n    var peaks = new (eval(\"Int\"+bits+\"Array\"))(numPeaks*2);\n\n    for (i = 0; i < numPeaks; i++) {\n        min = 0;\n        max = 0;\n\n        for (c = 0; c < numChan; c++) {\n            min += weight * channelPeaks[c][i*2];\n            max += weight * channelPeaks[c][i*2+1];\n        }\n\n        peaks[i*2] = min;\n        peaks[i*2+1] = max;\n    }\n\n    //return in array so channel number counts still work.\n    return [peaks];\n}\n\n/**\n* @param {AudioBuffer,TypedArray} source - Source of audio samples for peak calculations.\n* @param {Number} samplesPerPixel - Number of audio samples per peak.\n* @param {Number} cueIn - index in channel to start peak calculations from.\n* @param {Number} cueOut - index in channel to end peak calculations from (non-inclusive).\n*/\nmodule.exports = function(source, samplesPerPixel, isMono, cueIn, cueOut, bits) {\n    samplesPerPixel = samplesPerPixel || 10000;\n    bits = bits || 8;\n    isMono = isMono || true;\n\n    if ([8, 16, 32].indexOf(bits) < 0) {\n        throw new Error(\"Invalid number of bits specified for peaks.\");\n    }\n\n    var numChan = source.numberOfChannels;\n    var peaks = [];\n    var c;\n    var numPeaks;\n    var channel;\n    var slice;\n\n    if (typeof source.subarray === \"undefined\") {\n        for (c = 0; c < numChan; c++) {\n            channel = source.getChannelData(c);\n            cueIn = cueIn || 0;\n            cueOut = cueOut || channel.length;\n            slice = channel.subarray(cueIn, cueOut);\n            peaks.push(extractPeaks(slice, samplesPerPixel, bits));\n        }\n    }\n    else {\n        cueIn = cueIn || 0;\n        cueOut = cueOut || source.length;\n        peaks.push(extractPeaks(source.subarray(cueIn, cueOut), samplesPerPixel, bits));\n    }\n\n    if (isMono && peaks.length > 1) {\n        peaks = makeMono(peaks, bits);\n    }\n\n    numPeaks = peaks[0].length / 2;\n\n    return {\n        length: numPeaks,\n        data: peaks,\n        bits: bits\n    };\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/webaudio-peaks/index.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}